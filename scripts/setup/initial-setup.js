#!/usr/bin/env node

/**
 * Initial Setup Script
 *
 * Automates the initial setup process for Planning Poker Fluent.
 * Run this after installing dependencies.
 */

const fs = require('fs');
const path = require('path');
const readline = require('readline');
const chalk = require('chalk');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function question(prompt) {
  return new Promise(resolve => {
    rl.question(prompt, resolve);
  });
}

async function main() {
  console.log(chalk.blue.bold('\n=== Planning Poker Fluent - Initial Setup ===\n'));

  // Check if .env exists
  const envPath = path.join(__dirname, '../../.env');
  const envExamplePath = path.join(__dirname, '../../.env.example');

  if (fs.existsSync(envPath)) {
    console.log(chalk.yellow('âš  .env file already exists'));
    const overwrite = await question('Do you want to overwrite it? (y/N): ');
    if (overwrite.toLowerCase() !== 'y') {
      console.log(chalk.gray('Keeping existing .env file\n'));
      rl.close();
      return;
    }
  }

  console.log(chalk.green('Creating .env file...\n'));

  // Collect configuration
  console.log(chalk.bold('ServiceNow Configuration:\n'));

  const instance = await question('Instance URL (e.g., dev353895.service-now.com): ');
  const username = await question('Username: ');
  const password = await question('Password: ');
  const scope = await question('Scope (default: x_902080_msmplnpkr_fluent): ') ||
                'x_902080_msmplnpkr_fluent';

  console.log('');

  const enableComparison = await question('Enable comparison tests with legacy? (Y/n): ');
  const enablePerformance = await question('Enable performance monitoring? (Y/n): ');

  const legacyScope = enableComparison.toLowerCase() !== 'n'
    ? await question('Legacy scope (default: x_902080_msmplnpkr): ') || 'x_902080_msmplnpkr'
    : '';

  // Generate .env content
  const envContent = `# ServiceNow Instance Configuration
# Generated by initial-setup.js on ${new Date().toISOString()}

# Instance URL (without https://)
SN_INSTANCE=${instance}

# Authentication
SN_USERNAME=${username}
SN_PASSWORD=${password}

# Application Scope
SN_SCOPE=${scope}

# Development Environment
NODE_ENV=development

# Feature Flags
ENABLE_COMPARISON_TESTS=${enableComparison.toLowerCase() !== 'n'}
ENABLE_PERFORMANCE_MONITORING=${enablePerformance.toLowerCase() !== 'n'}

# Legacy Application Scope (for comparison tests)
${legacyScope ? 'LEGACY_SCOPE=' + legacyScope : '# LEGACY_SCOPE='}

# Test Configuration
TEST_TIMEOUT=30000
TEST_USER_SYS_ID=
TEST_SESSION_SYS_ID=

# CI/CD Configuration
AUTO_DEPLOY=false
SKIP_TESTS=false
`;

  fs.writeFileSync(envPath, envContent);

  console.log(chalk.green('\nâœ“ .env file created successfully!\n'));

  // Next steps
  console.log(chalk.blue.bold('Next Steps:\n'));
  console.log('1. Validate data model:');
  console.log(chalk.gray('   npm run validate\n'));

  console.log('2. Deploy tables to ServiceNow:');
  console.log(chalk.gray('   npm run sync:tables\n'));

  console.log('3. Seed initial data:');
  console.log(chalk.gray('   Run scripts/setup/seed-data.js in ServiceNow Background Scripts\n'));

  console.log('4. Start development:');
  console.log(chalk.gray('   npm run dev\n'));

  console.log(chalk.green('Setup complete! ðŸš€\n'));

  rl.close();
}

main().catch(error => {
  console.error(chalk.red('Error during setup:'), error);
  rl.close();
  process.exit(1);
});
